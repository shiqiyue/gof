package mqs

// Code generated by github.com/launchdarkly/go-options.  DO NOT EDIT.

import "fmt"

import "github.com/google/go-cmp/cmp"

type ApplyOptionFunc func(c *managementCfg) error

func (f ApplyOptionFunc) apply(c *managementCfg) error {
	return f(c)
}

func newManagementCfg(options ...Option) (managementCfg, error) {
	var c managementCfg
	err := applyManagementCfgOptions(&c, options...)
	return c, err
}

func applyManagementCfgOptions(c *managementCfg, options ...Option) error {
	for _, o := range options {
		if err := o.apply(c); err != nil {
			return err
		}
	}
	return nil
}

type Option interface {
	apply(*managementCfg) error
}

type optionStorageImpl struct {
	o Storage
}

func (o optionStorageImpl) apply(c *managementCfg) error {
	c.Storage = o.o
	return nil
}

func (o optionStorageImpl) Equal(v optionStorageImpl) bool {
	switch {
	case !cmp.Equal(o.o, v.o):
		return false
	}
	return true
}

func (o optionStorageImpl) String() string {
	name := "OptionStorage"

	// hack to avoid go vet error about passing a function to Sprintf
	var value interface{} = o.o
	return fmt.Sprintf("%s: %+v", name, value)
}

// OptionStorage 持久化存储
func OptionStorage(o Storage) Option {
	return optionStorageImpl{
		o: o,
	}
}
